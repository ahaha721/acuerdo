@using viafront3.Models.MarketViewModels
@using viafront3.Views.Market
@model OrderbookViewModel
@{
    ViewData["Title"] = "Order Book";
    ViewData.AddActivePage(Model.Market);
}

@section Head {
    @await Html.PartialAsync("_ChartCssPartial")
}

<h4>@ViewData["Title"] - @Model.MarketNice</h4>

<div class="row">
    <div class="col-md-6">
        <h4>Bid</h4>
        <table class="table table-bordered table-responsive table-hover">
            <tr>
                <th class="pad-decimals">
                    Price
                </th>
                <th class="pad-decimals">
                    Amount
                </th>
            </tr>
            <tbody>@{
                foreach (var item in Model.OrderDepth.bids)
                {
                    <tr>
                        <td>
                            <span class="pad-decimals-data">
                            @item.ElementAt(0)
                            </span>
                            &nbsp;@Model.PriceUnit
                        </td>
                        <td>
                            <span class="pad-decimals-data">
                            @item.ElementAt(1)
                            </span>
                            &nbsp;@Model.AmountUnit
                        </td>
                    </tr>
                }
            }</tbody>
        </table>
    </div>
    <div class="col-md-6">
        <h4>Ask</h4>
        <table class="table table-bordered table-responsive table-hover">
            <tr>
                <th class="pad-decimals">
                    Price
                </th>
                <th class="pad-decimals">
                    Amount
                </th>
            </tr>
            <tbody>@{
                foreach (var item in Model.OrderDepth.asks)
                {
                    <tr>
                        <td>
                            <span class="pad-decimals-data">
                            @item.ElementAt(0)
                            </span>
                            &nbsp;@Model.PriceUnit
                        </td>
                        <td>
                            <span class="pad-decimals-data">
                            @item.ElementAt(1)
                            </span>
                            &nbsp;@Model.AmountUnit
                        </td>
                    </tr>
                }
            }</tbody>
        </table>
    </div>
</div>

<div class="row">
    <a href="#" onclick="loadChart('1H');">1H</a>
    <a href="#" onclick="loadChart('4H');">4H</a>
    <a href="#" onclick="loadChart('1D');">1D</a>
    <a href="#" onclick="loadChart('1W');">1W</a>
    <a href="#" onclick="loadChart('1M');">1M</a>
    <div class="col-md-12" id="chart">
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_PadDecimalsScriptsPartial")
    @await Html.PartialAsync("_ChartScriptsPartial")
}

<script>
    function ready(fn) {
        if (document.readyState != 'loading'){
            fn();
        } else if (document.addEventListener) {
            document.addEventListener('DOMContentLoaded', fn);
        } else {
            document.attachEvent('onreadystatechange', function() {
            if (document.readyState != 'loading')
                fn();
            });
        }
    }

    function loadChart(intervalCode) {
        var multiplier = parseInt(intervalCode[0]);
        var period = intervalCode[1];
        var intervalSeconds = 3600;
        switch (period) {
            case "H":
                intervalSeconds = multiplier * 3600;
                break;
            case "D":
                intervalSeconds = multiplier * 3600 * 24;
                break;
            case "W":
                intervalSeconds = multiplier * 3600 * 24 * 7;
                break;
            case "M":
                intervalSeconds = multiplier * 3600 * 24 * 7 * 30;
                break;
        }
        var unixTimestamp = Math.floor(+new Date()/1000);
        var start = unixTimestamp - intervalSeconds * 30;
        var url = "/Market/klines?market=@Model.Market&start=" + start + "&end=" + unixTimestamp + "&interval=" + intervalSeconds;
        $.getJSON(url, function(data) {
            viachart.load(data);
        });
    }

    ready(function() {
        viachart.create("#chart");
        loadChart("1H");
    });
</script>