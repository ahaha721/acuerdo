@using viafront3.Models.WalletViewModels
@using viafront3.Views
@model UserTransactionsViewModel
@{
    ViewData["Title"] = "User Wallet Txs";
}
<h4>@ViewData["Title"] - @Model.Asset</h4>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Transactions Incomming
            </div>
            <div class="panel-body">
                <table class="table table-bordered table-responsive table-hover">
                    <tr>
                        <th>
                            Date
                        </th>
                        <th>
                            TX ID
                        </th>
                        <th>
                            From
                        </th>
                        <th>
                            To
                        </th>
                        <th class="pad-decimals">
                            Amount
                        </th>
                        <th>
                            Id
                        </th>
                    </tr>
                    <tbody>
                        @{
                            foreach (var item in Model.TransactionsIncomming)
                            {
                                <tr>
                                    <td>
                                        <nobr>@ViewUtils.FormatUnixTime(item.ChainTx.Date)</nobr>
                                    </td>
                                    <td>
                                        <input type="text" value="@item.ChainTx.TxId" size="30" readonly>
                                    </td>
                                    <td>
                                        <span class="truncate">@item.ChainTx.InputsAddrs()</span>
                                    </td>
                                    <td>
                                        @item.OutputsAddrs()
                                    </td>
                                    <td>
                                        <span class="pad-decimals-data">
                                            @ViewUtils.FormatStrDec(Model.Wallet.AmountToString(item.AmountOutputs()),
                                                Model.AssetSettings.Decimals)
                                        </span>
                                    </td>
                                    <td>
                                        @item.Id
                                    </td>
                                </tr>
                            }
                    }
                </tbody>
            </table>
            @{
                var icount = Model.TxsIncommingCount;
                var ioffset = Model.TxsIncommingOffset;
                var ilimit = Model.TxsIncommingLimit;
                if (ioffset >= ilimit)
                {
                    <a asp-action="UserInspectWalletTxs" asp-route-id="@ViewData["userid"]" asp-route-asset="@Model.Asset" asp-route-inoffset="@(ioffset-ilimit)" asp-route-inlimit="@ilimit">prev</a>
                }
                else if (ioffset > 0)
                {
                    <a asp-action="UserInspectWalletTxs" asp-route-id="@ViewData["userid"]" asp-route-asset="@Model.Asset" asp-route-inoffset="0" asp-route-inlimit="@ilimit">prev</a>
                }
                if (icount - ioffset > ilimit)
                {
                    <a asp-action="UserInspectWalletTxs" asp-route-id="@ViewData["userid"]" asp-route-asset="@Model.Asset" asp-route-inoffset="@(ioffset+ilimit)" asp-route-inlimit="@ilimit">next</a>
                }
            }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Transactions Outgoing
            </div>
            <div class="panel-body">
                <table class="table table-bordered table-responsive table-hover">
                    <tr>
                        <th>
                            Date
                        </th>
                        <th>
                            TX ID
                        </th>
                        <th>
                            From
                        </th>
                        <th>
                            To
                        </th>
                        <th class="pad-decimals">
                            Amount
                        </th>
                        <th>
                            Id
                        </th>
                    </tr>
                    <tbody>
                        @{
                            foreach (var item in Model.TransactionsOutgoing)
                            {
                                <tr>
                                    <td>
                                        <nobr>@ViewUtils.FormatUnixTime(item.ChainTx.Date)</nobr>
                                    </td>
                                    <td>
                                        <input type="text" value="@item.ChainTx.TxId" size="30" readonly>
                                    </td>
                                    <td>
                                        <span class="truncate">@item.InputsAddrs()</span>
                                    </td>
                                    <td>
                                        @item.ChainTx.OutputsAddrs()
                                    </td>
                                    <td>
                                        <span class="pad-decimals-data">
                                            @ViewUtils.FormatStrDec(Model.Wallet.AmountToString(item.AmountInputs()),
                                                Model.AssetSettings.Decimals)
                                        </span>
                                    </td>
                                    <td>
                                        @item.Id
                                    </td>
                                </tr>
                            }
                    }
                </tbody>
            </table>
            @{
                var ocount = Model.TxsOutgoingCount;
                var ooffset = Model.TxsOutgoingOffset;
                var olimit = Model.TxsOutgoingLimit;
                if (ooffset >= olimit)
                {
                    <a asp-action="UserInspectWalletTxs" asp-route-id="@ViewData["userid"]" asp-route-asset="@Model.Asset" asp-route-outoffset="@(ooffset-olimit)" asp-route-outlimit="@olimit">prev</a>
                }
                else if (ooffset > 0)
                {
                    <a asp-action="UserInspectWalletTxs" asp-route-id="@ViewData["userid"]" asp-route-asset="@Model.Asset" asp-route-outoffset="0" asp-route-outlimit="@olimit">prev</a>
                }
                if (ocount - ooffset > olimit)
                {
                    <a asp-action="UserInspectWalletTxs" asp-route-id="@ViewData["userid"]" asp-route-asset="@Model.Asset" asp-route-outoffset="@(ooffset+olimit)" asp-route-outlimit="@olimit">next</a>
                }
            }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_PadDecimalsScriptsPartial")
}
