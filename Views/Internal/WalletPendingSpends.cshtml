@using viafront3.Models.InternalViewModels
@using viafront3.Views
@model WalletPendingSpendsViewModel
@{
    ViewData["Title"] = "Wallet Pending Spends";
}

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Pending Spends - @Model.Asset
            </div>
            <div class="panel-body">
                <form asp-action="WalletPendingSpends" method="get" class="form-group">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <input type="hidden" asp-for="Asset" value="@Model.Asset" />
                    <input type="hidden" asp-for="Offset" value="@Model.Offset" />
                    <input type="hidden" asp-for="Limit" value="@Model.Limit" />
                    <div class="form-group">
                        <select asp-for="OnlyIncomplete" class="onchange-submit">
                            <option value="true" selected="@(Model.OnlyIncomplete ? "selected" : null)">Incomplete</option>
                            <option value="false" selected="@(!Model.OnlyIncomplete ? "selected" : null)">All</option>
                        </select>
                    </div>
                </form>
                <table class="table table-condensed table-responsive table-hover">
                    <tr>
                        <th>
                            Date
                        </th>
                        <th>
                            Spend Code
                        </th>
                        <th>
                            Tag
                        </th>
                        <th>
                            Tagged For
                        </th>
                        <th>
                            State
                        </th>
                        <th class="pad-decimals">
                            Amount
                        </th>
                    </tr>
                    <tbody>
                        @{
                            foreach (var item in Model.PendingSpends)
                            {
                                var amount = Model.Wallet.AmountToString(item.Amount);
                                amount = ViewUtils.FormatStrDec(amount, Model.AssetSettings.Decimals);

                                <tr>
                                    <td>
                                        <nobr>@ViewUtils.FormatUnixTime(@item.Date)
                                    </td>
                                    <td>
                                        @item.SpendCode
                                    </td>
                                    <td>
                                        <a asp-action="UserInspect" asp-route-id="@item.Tag.Tag">
                                            @item.Tag.Tag
                                        </a>
                                    </td>
                                    <td>
                                        <a asp-action="UserInspect" asp-route-id="@item.TagFor.Tag">
                                            @item.TagFor.Tag
                                        </a>
                                    </td>
                                    <td>
                                        @item.State
                                    </td>
                                    <td>
                                        <span class="pad-decimals-data">
                                            @amount
                                        </span>
                                    </td>
                                </tr>
                            }
                    }
                </tbody>
            </table>
            @{
                var count = Model.Count;
                var offset = Model.Offset;
                var limit = Model.Limit;
                if (offset >= limit)
                {
                    <a asp-action="WalletPendingSpends" asp-route-asset="@Model.Asset" asp-route-offset="@(offset-limit)" asp-route-limit="@limit" asp-route-onlyIncomplete="@Model.OnlyIncomplete">prev</a>
                }
                else if (offset > 0)
                {
                    <a asp-action="WalletPendingSpends" asp-route-asset="@Model.Asset" asp-route-offset="0" asp-route-limit="@limit" asp-route-onlyIncomplete="@Model.OnlyIncomplete">prev</a>
                }
                if (count - offset > limit)
                {
                    <a asp-action="WalletPendingSpends" asp-route-asset="@Model.Asset" asp-route-offset="@(offset+limit)" asp-route-limit="@limit" asp-route-onlyIncomplete="@Model.OnlyIncomplete">next</a>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    @await Html.PartialAsync("_PadDecimalsScriptsPartial")
}