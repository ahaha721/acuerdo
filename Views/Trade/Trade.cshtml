@using viafront3.Models.TradeViewModels
@using viafront3.Views.Trade
@using viafront3.Views
@model TradeViewModel
@{
    ViewData["Title"] = "Trade";
    ViewData.AddActivePage(Model.Market);
}
<h4>@ViewData["Title"] - @Model.MarketNice</h4>

<div class="row">
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                Limit Order
            </div>
            <div class="panel-body">
                <form asp-controller="Trade" asp-action="LimitOrder" method="post">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="Market" value="@Model.Market"/>
                    <div class="form-group">
                        <label for="form-limit-type">Bid/Ask</label>
                        <select class="form-control" id="form-limit-type" asp-for="Side">
                            <option value="2">Bid</option>
                            <option value="1">Ask</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="form-limit-amount" class="col-2 col-form-label">Amount (@Model.Settings.AmountUnit, min @Model.Settings.AmountInterval)</label>
                        <div class="col-10">
                            <input class="form-control" type="number" id="form-limit-amount" asp-for="Amount" data-val="true" data-val-number="The Amount field is not a valid number." data-val-required="The Amount field is required.">
                            <span asp-validation-for="Amount" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="form-limit-price" class="col-2 col-form-label">Price (@Model.Settings.PriceUnit, min @Model.Settings.PriceInterval)</label>
                        <div class="col-10">
                            <input class="form-control" type="number" id="form-limit-price" asp-for="Price" data-val="true" data-val-number="The Price field is not a valid number." data-val-required="The Price field is required.">
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-default">Submit</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                Market Order
            </div>
            <div class="panel-body">
                <form asp-controller="Trade" asp-action="MarketOrder" method="post">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="Market" value="@Model.Market"/>
                    <div class="form-group">
                        <label for="form-market-type">Bid/Ask</label>
                        <select class="form-control" id="form-market-type" asp-for="Side">
                            <option value="2">Bid</option>
                            <option value="1">Ask</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="form-market-amount" class="col-2 col-form-label">Amount (@Model.Settings.AmountUnit, min @Model.Settings.AmountInterval)</label>
                        <div class="col-10">
                            <input class="form-control" type="number" id="form-market-amount" asp-for="Amount" data-val="true" data-val-number="The Amount field is not a valid number." data-val-required="The Amount field is required.">
                            <span asp-validation-for="Amount" class="text-danger"></span>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-default">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Pending Orders
            </div>
            <div class="panel-body">
                @Html.Partial("_PendingOrdersPartial", Model.OrdersPending,
                    new ViewDataDictionary(this.ViewData) { { "use_pagination", false }, { "trade_model", Model } })
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Completed Bid Orders
            </div>
            <div class="panel-body">
                @Html.Partial("_CompletedOrdersPartial", Model.BidOrdersCompleted,
                    new ViewDataDictionary(this.ViewData) { { "type", "Bid" }, { "use_pagination", false }, { "trade_model", Model } })
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Completed Ask Orders
            </div>
            <div class="panel-body">
                @Html.Partial("_CompletedOrdersPartial", Model.AskOrdersCompleted,
                    new ViewDataDictionary(this.ViewData) { { "type", "Ask" }, { "use_pagination", false }, { "trade_model", Model } })
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Current Balances
            </div>
            <div class="panel-body">
                @Html.Partial("_UserBalancesPartial", Model.Balances,
                    new ViewDataDictionary(this.ViewData) { { "asset_settings", Model.AssetSettings } })
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    @await Html.PartialAsync("_PadDecimalsScriptsPartial")
    @await Html.PartialAsync("_OrderCancellationScriptPartial")
}